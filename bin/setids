#!/bin/bash

# If they give us the input on the command line use it
clientId="${1-}"
clientSecret="${2-}"

## Gather our input

# Read our client id if provided
if [[ "${clientId}" = "" ]]; then
  printf "Please enter your \x1b[1mclient id\x1b[0m    : "
  read clientId

  if [[ "${clientId}" = "" ]]; then
    printf "\nCanceling; we need a CLIENT_ID from you"
    exit 1
  fi
fi

# Read client secret if provided
if [[ "${clientSecret}" = "" ]]; then
  printf "Please enter your \x1b[1mclient secret\x1b[0m: "
  read clientSecret

  if [[ "${clientSecret}" = "" ]]; then
    printf "\nCanceling; we need a CLIENT_SECRET from you"
    exit 1
  fi
fi

# Create a functions for easy reuse of status
function STATUS() {
  printf "\x1b[2G\x1b[${1}m${2}\x1b[0m\n"
}

# Check to see if we have enough parameters
if [[ "${clientId}" = "" ]] || [[ "${clientSecret}" = "" ]]; then
  printf "Usage: setids <client_id> <client_secret>\n"
  exit 1
fi

# Let's get started
printf "\nChecking for places where your client ids and secrets are used\n\n"

# Check to see if have a .env file and if not, create one
printf "[    ] Check for an existing .env file"
if [[ -f "node_checkout/.env" ]]; then
  STATUS 33 skip
else
  path="node_checkout/.env"
  printf >>"${path}" "CLIENT_ID=${clientId}\n"
  printf >>"${path}" "CLIENT_SECRET=${clientSecret}\n"
  STATUS 32 done
fi

sedString=$(echo "xargs -0 sed -i '' 's/<client_id>/${clientId}/g'")

printf "[    ] Updating objective-c files for CLIENT_ID..."
find . -name "*.m" -print0 | eval $sedString
STATUS 32 done

printf "[    ] Updating swift files for CLIENT_ID..."
find . -name "*.swift" -print0 | eval $sedString
STATUS 32 done
